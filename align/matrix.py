# -*- coding: utf-8 -*-

__all__ = ['DNAFULL', 'BLOSUM62']

_NUCL_LETTERS = [
    'A', 'T', 'G', 'C', 'U',        # non-ambiguous letters
    'R', 'Y', 'S', 'W', 'K', 'M',   # 2-base ambiguity
    'B', 'D', 'H', 'V',             # 3-base ambiguity
    'N',                            # 4-base ambiguity
]

_NUCL_SCORES = {
     #     A   T   G   C   U   R   Y   S   W   K   M   B   D   H   V   N
    'A': [ 5, -4, -4, -4, -4,  1, -4, -4,  1, -4,  1, -4, -1, -1, -1, -2],
    'T': [-4,  5, -4, -4,  5, -4,  1, -4,  1,  1, -4, -1, -1, -1, -4, -2],
    'G': [-4, -4,  5, -4, -4,  1, -4,  1, -4,  1, -4, -1, -1, -4, -1, -2],
    'C': [-4, -4, -4,  5, -4, -4,  1,  1, -4, -4,  1, -1, -4, -1, -1, -2],
    'U': [-4,  5, -4, -4,  5, -4,  1, -4,  1,  1, -4, -1, -1, -1, -4, -2],

    'R': [ 1, -4,  1, -4, -4, -1, -4, -2, -2, -2, -2, -3, -1, -3, -1, -1],
    'Y': [-4,  1, -4,  1,  1, -4, -1, -2, -2, -2, -2, -1, -3, -1, -3, -1],
    'S': [-4, -4,  1,  1, -4, -2, -2, -1, -4, -2, -2, -1, -3, -3, -1, -1],
    'W': [ 1,  1, -4, -4,  1, -2, -2, -4, -1, -2, -2, -3, -1, -1, -3, -1],
    'K': [-4,  1,  1, -4,  1, -2, -2, -2, -2, -1, -4, -1, -1, -3, -3, -1],
    'M': [ 1, -4, -4,  1, -4, -2, -2, -2, -2, -4, -1, -3, -3, -1, -1, -1],

    'B': [-4, -1, -1, -1, -1, -3, -1, -1, -3, -1, -3, -1, -2, -2, -2, -1],
    'D': [-1, -1, -1, -4, -1, -1, -3, -3, -1, -1, -3, -2, -1, -2, -2, -1],
    'H': [-1, -1, -4, -1, -1, -3, -1, -3, -1, -3, -1, -2, -2, -1, -2, -1],
    'V': [-1, -4, -1, -1, -4, -1, -3, -1, -3, -3, -1, -2, -2, -2, -1, -1],

    'N': [-2, -2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
}

# NOTE: This relies on the ordering of _NUCL_LETTERS and the lists inside
#       _NUCL_SCORES above.
DNAFULL = {letter: dict(zip(_NUCL_LETTERS, scores))
           for letter, scores in _NUCL_SCORES.items()}

_AA_LETTERS = [
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M',
    'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z', '*',
]

_BLOSUM62_SCORES = {
     #     A   B   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   X   Y   Z   *
    'A': [ 4, -2,  0, -2, -1, -2,  0, -2, -1, -1, -1, -1, -2, -1, -1, -1,  1,  0,  0, -3,  0, -2, -1, -4],
    'B': [-2,  4, -3,  4,  1, -3, -1,  0, -3,  0, -4, -3,  3, -2,  0, -1,  0, -1, -3, -4, -1, -3,  1, -4],
    'C': [ 0, -3,  9, -3, -4, -2, -3, -3, -1, -3, -1, -1, -3, -3, -3, -3, -1, -1, -1, -2, -2, -2, -3, -4],
    'D': [-2,  4, -3,  6,  2, -3, -1, -1, -3, -1, -4, -3,  1, -1,  0, -2,  0, -1, -3, -4, -1, -3,  1, -4],
    'E': [-1,  1, -4,  2,  5, -3, -2,  0, -3,  1, -3, -2,  0, -1,  2,  0,  0, -1, -2, -3, -1, -2,  4, -4],
    'F': [-2, -3, -2, -3, -3,  6, -3, -1,  0, -3,  0,  0, -3, -4, -3, -3, -2, -2, -1,  1, -1,  3, -3, -4],
    'G': [ 0, -1, -3, -1, -2, -3,  6, -2, -4, -2, -4, -3,  0, -2, -2, -2,  0, -2, -3, -2, -1, -3, -2, -4],
    'H': [-2,  0, -3, -1,  0, -1, -2,  8, -3, -1, -3, -2,  1, -2,  0,  0, -1, -2, -3, -2, -1,  2,  0, -4],
    'I': [-1, -3, -1, -3, -3,  0, -4, -3,  4, -3,  2,  1, -3, -3, -3, -3, -2, -1,  3, -3, -1, -1, -3, -4],
    'K': [-1,  0, -3, -1,  1, -3, -2, -1, -3,  5, -2, -1,  0, -1,  1,  2,  0, -1, -2, -3, -1, -2,  1, -4],
    'L': [-1, -4, -1, -4, -3,  0, -4, -3,  2, -2,  4,  2, -3, -3, -2, -2, -2, -1,  1, -2, -1, -1, -3, -4],
    'M': [-1, -3, -1, -3, -2,  0, -3, -2,  1, -1,  2,  5, -2, -2,  0, -1, -1, -1,  1, -1, -1, -1, -1, -4],
    'N': [-2,  3, -3,  1,  0, -3,  0,  1, -3,  0, -3, -2,  6, -2,  0,  0,  1,  0, -3, -4, -1, -2,  0, -4],
    'P': [-1, -2, -3, -1, -1, -4, -2, -2, -3, -1, -3, -2, -2,  7, -1, -2, -1, -1, -2, -4, -2, -3, -1, -4],
    'Q': [-1,  0, -3,  0,  2, -3, -2,  0, -3,  1, -2,  0,  0, -1,  5,  1,  0, -1, -2, -2, -1, -1,  3, -4],
    'R': [-1, -1, -3, -2,  0, -3, -2,  0, -3,  2, -2, -1,  0, -2,  1,  5, -1, -1, -3, -3, -1, -2,  0, -4],
    'S': [ 1,  0, -1,  0,  0, -2,  0, -1, -2,  0, -2, -1,  1, -1,  0, -1,  4,  1, -2, -3,  0, -2,  0, -4],
    'T': [ 0, -1, -1, -1, -1, -2, -2, -2, -1, -1, -1, -1,  0, -1, -1, -1,  1,  5,  0, -2,  0, -2, -1, -4],
    'V': [ 0, -3, -1, -3, -2, -1, -3, -3,  3, -2,  1,  1, -3, -2, -2, -3, -2,  0,  4, -3, -1, -1, -2, -4],
    'W': [-3, -4, -2, -4, -3,  1, -2, -2, -3, -3, -2, -1, -4, -4, -2, -3, -3, -2, -3, 11, -2,  2, -3, -4],
    'X': [ 0, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1,  0,  0, -1, -2, -1, -1, -1, -4],
    'Y': [-2, -3, -2, -3, -2,  3, -3,  2, -1, -2, -1, -1, -2, -3, -1, -2, -2, -2, -1, 2, - 1,  7, -2, -4],
    'Z': [-1,  1, -3,  1,  4, -3, -2,  0, -3,  1, -3, -1,  0, -1,  3,  0,  0, -1, -2, -3, -1, -2,  4, -4],
    '*': [-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,  1],
}

# NOTE: This relies on the ordering of _AA_LETTERS and the lists inside
#       _BLOSUM62_SCORES above.
BLOSUM62 = {letter: dict(zip(_AA_LETTERS, scores))
            for letter, scores in _BLOSUM62_SCORES.items()}
